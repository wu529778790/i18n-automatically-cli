name: Auto Test, Version & Publish

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  auto-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          if [ -f pnpm-lock.yaml ]; then
            pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile
          else
            pnpm install
          fi

      - name: Check package
        run: echo "No build step needed for JavaScript project"

      - name: Run tests
        run: pnpm test

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check if version should be updated
        id: should_update
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$LAST_COMMIT_MSG" == *"v1."* && "$LAST_COMMIT_MSG" == *"[skip ci]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Last commit was version update, skipping..."
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Proceeding with version update..."
          fi

      - name: Update version
        if: steps.should_update.outputs.skip == 'false'
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "chore: update build files"
          fi

          npm version patch -m "v%s [skip ci]"

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Push version update
        if: steps.should_update.outputs.skip == 'false'
        run: |
          git push origin HEAD:${{ github.ref_name }}
          git push origin --tags

      - name: Publish to NPM
        if: steps.should_update.outputs.skip == 'false'
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
